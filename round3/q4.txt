Question 4:
#include <stdio.h>
#include <stdlib.h>

typedef struct HybridNode {
    int data;
    struct HybridNode *left, *right;  // BST pointers
    struct HybridNode *prev, *next;  // DLL pointers
} HybridNode;

HybridNode* createNode(int data) {
    HybridNode* newNode = (HybridNode*)malloc(sizeof(HybridNode));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    newNode->prev = newNode->next = NULL;
    return newNode;
}

HybridNode* insertBST(HybridNode* root, int data) {
    if (root == NULL) return createNode(data);

    if (data < root->data) {
        root->left = insertBST(root->left, data);
    } else {
        root->right = insertBST(root->right, data);
    }
    return root;
}

void insertDLL(HybridNode** head, HybridNode* newNode) {
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    HybridNode* current = *head;
    while (current->next != NULL && current->data < newNode->data) {
        current = current->next;
    }

    if (current->data > newNode->data) {
        newNode->next = current;
        newNode->prev = current->prev;
        if (current->prev) {
            current->prev->next = newNode;
        }
        current->prev = newNode;
        if (current == *head) {
            *head = newNode;
        }
    } else {
        current->next = newNode;
        newNode->prev = current;
    }
}

HybridNode* deleteNode(HybridNode* root, int data) {
    if (root == NULL) return root;

    if (data < root->data) {
        root->left = deleteNode(root->left, data);
    } else if (data > root->data) {
        root->right = deleteNode(root->right, data);
    } else {
        if (root->left == NULL) {
            HybridNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            HybridNode* temp = root->left;
            free(root);
            return temp;
        }

        HybridNode* temp = root->right;
        while (temp->left != NULL) {
            temp = temp->left;
        }
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

void printInOrder(HybridNode* root) {
    if (root != NULL) {
        printInOrder(root->left);
        printf("%d ", root->data);
        printInOrder(root->right);
    }
}

void printDLL(HybridNode* head) {
    HybridNode* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

void freeStructure(HybridNode* root) {
    if (root == NULL) return;
    freeStructure(root->left);
    freeStructure(root->right);
    free(root);
}

int main() {
    HybridNode* root = NULL;
    HybridNode* dllHead = NULL;

    root = insertBST(root, 50);
    insertDLL(&dllHead, root);
    root = insertBST(root, 30);
    insertDLL(&dllHead, root->left);
    root = insertBST(root, 70);
    insertDLL(&dllHead, root->right);
    root = insertBST(root, 20);
    insertDLL(&dllHead, root->left->left);
    root = insertBST(root, 40);
    insertDLL(&dllHead, root->left->right);

    printf("BST In-order: ");
    printInOrder(root);

    printf("\nDLL Forward: ");
    printDLL(dllHead);

    root = deleteNode(root, 30);
    printf("\nAfter deletion:\n");
    printf("BST In-order: ");
    printInOrder(root);
    printf("\nDLL Forward: ");
    printDLL(dllHead);

    freeStructure(root);
    return 0;
}

Answer:


// Key fixes with error explanations:

1. **DLL Insertion Logic**:
void insertDLL(HybridNode** head, HybridNode* newNode) {
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    HybridNode* current = *head;
    HybridNode* prev = NULL;
    while (current && current->data < newNode->data) {
        prev = current;
        current = current->next;
    }

    if (!current) {  // Add at end
        prev->next = newNode;
        newNode->prev = prev;
    } else {
        newNode->next = current;
        newNode->prev = current->prev;
        if (current->prev) {
            current->prev->next = newNode;
        } else {
            *head = newNode;
        }
        current->prev = newNode;
    }
}

2. **Delete Node DLL Update**:
HybridNode* deleteNode(HybridNode* root, int data) {
    // ... existing code ...
    else {
        // Fix DLL links before deletion
        if (root->prev) root->prev->next = root->next;
        if (root->next) root->next->prev = root->prev;
        // ... rest of deletion code ...
    }
}

3. **Memory Management**:
void freeStructure(HybridNode* root) {
    if (root == NULL) return;
    // Traverse DLL instead of BST for proper cleanup
    HybridNode* current = root;
    while (current->prev) current = current->prev;
    while (current) {
        HybridNode* temp = current;
        current = current->next;
        free(temp);
    }
}

4. **Main Function Fixes**:
int main() {
    // Create nodes first before inserting into both structures
    HybridNode* node50 = createNode(50);
    root = node50;
    insertDLL(&dllHead, node50);

    HybridNode* node30 = createNode(30);
    root = insertBST(root, 30);
    insertDLL(&dllHead, node30);
    // ... repeat for other nodes ...
}

5. **DLL Head Update**:
// Added check for head update during deletion
if (root == dllHead) {
    dllHead = root->next;
}

6. **BST-DLL Sync**:
// Modified insertBST to return created node
HybridNode* insertBST(HybridNode* root, int data) {
    if (root == NULL) {
        HybridNode* newNode = createNode(data);
        return newNode;
    }
    // ... rest unchanged ...
}

7. **Print DLL Fix**:
// Changed to use actual DLL pointers
void printDLL(HybridNode* head) {
    HybridNode* current = head;
    while (current) {
        printf("%d ", current->data);
        current = current->next;  // Use next pointer instead of right
    }
}
